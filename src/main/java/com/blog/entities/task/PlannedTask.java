package com.blog.entities.task;

import com.blog.entities.ProcessorTypeEnumListToStringFieldConverter;
import com.blog.entities.StringListToStringFieldConverter;
import com.blog.service.processor.ProcessorType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.persistence.*;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

/**
 * This entity represents planned backup task.
 */
@Entity
@Table(name = "planned_backup_tasks")
public class PlannedTask {
    /**
     * Identifier of each planned backup task. Identifier is generated by PostgreSQL database after saving of entity.
     */
    @Id
    @Column(insertable = false, updatable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * Whether planned backup task is being executed or waiting of timer firing.
     */
    @Enumerated(EnumType.STRING)
    private State state;

    /**
     * List of storage settings identifier.
     * <p>
     * We need to know storage settings ID to be able to start a new task when the timer fired.
     */
    @Column(updatable = false)
    @Convert(converter = StringListToStringFieldConverter.class)
    private List<String> storageSettingsNameList;

    /**
     * Identifier of database settings.
     * <p>
     * We need to know database settings ID to be able to start a new task when the timer fired.
     */
    @Column(updatable = false)
    private String databaseSettingsName;

    /**
     * What processors to apply on backup.
     * <p>
     * This field automatically converted into single string and back to List by {@link StringListToStringFieldConverter} class.
     */
    @Column(updatable = false)
    @Convert(converter = ProcessorTypeEnumListToStringFieldConverter.class)
    private List<ProcessorType> processors;

    /**
     * Timestamp of moment when task was started last time.
     * <p>
     * No timezone offset set. Time stored in database in UTC.
     */
    private LocalDateTime lastStartedTime;

    /**
     * Period before starting task next time.
     */
    private Duration interval;

    /**
     * What {@link Task} handles this planned task.
     * <p>
     * May by null if no task handles this planned task at the moment.
     */
    @Nullable
    private Integer handlerTaskId;

    PlannedTask() {

    }

    private PlannedTask(@NotNull State state, @NotNull List<String> storageSettingsNameList, @NotNull String databaseSettingsName,
                        @NotNull List<ProcessorType> processors, @NotNull LocalDateTime lastStartedTime, @NotNull Duration interval,
                        @Nullable Integer handlerTaskId) {
        this.state = Objects.requireNonNull(state);
        this.storageSettingsNameList = Objects.requireNonNull(storageSettingsNameList);
        this.databaseSettingsName = Objects.requireNonNull(databaseSettingsName);
        this.processors = Objects.requireNonNull(processors);
        this.lastStartedTime = Objects.requireNonNull(lastStartedTime);
        this.interval = Objects.requireNonNull(interval);
        this.handlerTaskId = handlerTaskId;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public List<String> getStorageSettingsNameList() {
        return storageSettingsNameList;
    }

    public void setStorageSettingsNameList(List<String> storageSettingsNameList) {
        this.storageSettingsNameList = storageSettingsNameList;
    }

    public String getDatabaseSettingsName() {
        return databaseSettingsName;
    }

    public void setDatabaseSettingsName(String databaseSettingsName) {
        this.databaseSettingsName = databaseSettingsName;
    }

    public List<ProcessorType> getProcessors() {
        return processors;
    }

    public void setProcessors(List<ProcessorType> processors) {
        this.processors = processors;
    }

    public LocalDateTime getLastStartedTime() {
        return lastStartedTime;
    }

    public void setLastStartedTime(LocalDateTime lastStartedTime) {
        this.lastStartedTime = lastStartedTime;
    }

    public Duration getInterval() {
        return interval;
    }

    public void setInterval(Duration interval) {
        this.interval = interval;
    }

    public Integer getHandlerTaskId() {
        return handlerTaskId;
    }

    public void setHandlerTaskId(Integer handlerTaskId) {
        this.handlerTaskId = handlerTaskId;
    }

    public State getState() {
        return state;
    }

    public void setState(State state) {
        this.state = state;
    }

    @Override
    public String toString() {
        return "PlannedTask{" +
                "id=" + id +
                ", state=" + state +
                ", storageSettingsNameList=" + storageSettingsNameList +
                ", databaseSettingsName='" + databaseSettingsName + '\'' +
                ", processors=" + processors +
                ", lastStartedTime=" + lastStartedTime +
                ", interval=" + interval +
                ", handlerTaskId=" + handlerTaskId +
                '}';
    }

    public enum State {
        WAITING,
        EXECUTING,
    }


    public static final class Builder {
        private State state;
        private List<String> storageSettingsNameList;
        private String databaseSettingsName;
        private List<ProcessorType> processors;
        private LocalDateTime lastStartedTime;
        private Duration interval;
        private Integer handlerTaskId;

        public Builder() {
        }

        public Builder withState(State state) {
            this.state = state;
            return this;
        }

        public Builder withStorageSettingsNameList(List<String> storageSettingsNameList) {
            this.storageSettingsNameList = storageSettingsNameList;
            return this;
        }

        public Builder withDatabaseSettingsName(String databaseSettingsName) {
            this.databaseSettingsName = databaseSettingsName;
            return this;
        }

        public Builder withProcessors(List<ProcessorType> processors) {
            this.processors = processors;
            return this;
        }

        public Builder withLastStartedTime(LocalDateTime lastStartedTime) {
            this.lastStartedTime = lastStartedTime;
            return this;
        }

        public Builder withInterval(Duration interval) {
            this.interval = interval;
            return this;
        }

        public Builder withHandlerTaskId(@Nullable Integer handlerTaskId) {
            this.handlerTaskId = handlerTaskId;
            return this;
        }

        public PlannedTask build() {
            return new PlannedTask(state, storageSettingsNameList, databaseSettingsName, processors, lastStartedTime,
                    interval, handlerTaskId);
        }
    }
}
