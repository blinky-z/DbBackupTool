package com.blog.entities.task;

import com.blog.entities.backup.BackupProperties;
import org.jetbrains.annotations.NotNull;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * This entity represents task: creating, restoring, uploading, downloading or deleting backup.
 */
@Entity
@Table(name = "backup_tasks")
public class Task {
    /**
     * Identifier of each backup task. Identifier is generated by PostgreSQL database after saving of entity.
     */
    @Id
    @Column(insertable = false, updatable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * Backup task type.
     * <p>
     * Type is set at the very start of any task and can't be changed.
     *
     * @see Type
     */
    @Enumerated(EnumType.STRING)
    @Column(updatable = false)
    private Type type;

    /**
     * Who initiated a task: user or server.
     * <p>
     * We need to know it to show on front only these tasks that was started by user.
     *
     * @see RunType
     */
    @Enumerated(EnumType.STRING)
    @Column(updatable = false)
    private RunType runType;

    /**
     * Backup task state.
     * <p>
     * State is updated with every new step in task being executed.
     *
     * @see Task.State
     */
    @Enumerated(EnumType.STRING)
    private State state;

    /**
     * This field is set when task interrupted.
     * <p>
     * Default is {@literal false}.
     */
    @Column(insertable = false)
    private boolean interrupted;

    /**
     * Identifier of {@link BackupProperties}.
     * <p>
     * We need to know backup ID to be able to handle occurred errors.
     */
    @Column(updatable = false)
    private Integer backupPropertiesId;

    /**
     * Start time of the task.
     */
    @Column(updatable = false)
    private LocalDateTime date;

    Task() {

    }

    public Task(@NotNull Type type, @NotNull RunType runType, @NotNull State state, @NotNull Integer backupPropertiesId,
                @NotNull LocalDateTime date) {
        this.type = Objects.requireNonNull(type);
        this.runType = Objects.requireNonNull(runType);
        this.state = Objects.requireNonNull(state);
        this.backupPropertiesId = Objects.requireNonNull(backupPropertiesId);
        this.date = Objects.requireNonNull(date);
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Type getType() {
        return type;
    }

    public void setType(Type type) {
        this.type = type;
    }

    public RunType getRunType() {
        return runType;
    }

    public void setRunType(RunType runType) {
        this.runType = runType;
    }

    public State getState() {
        return state;
    }

    public void setState(State state) {
        this.state = state;
    }

    public boolean getInterrupted() {
        return interrupted;
    }

    public void setInterrupted(boolean interrupted) {
        this.interrupted = interrupted;
    }

    public Integer getBackupPropertiesId() {
        return backupPropertiesId;
    }

    public void setBackupPropertiesId(Integer backupPropertiesId) {
        this.backupPropertiesId = backupPropertiesId;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    @Override
    public String toString() {
        return "Task{" +
                "id=" + id +
                ", type=" + type +
                ", runType=" + runType +
                ", state=" + state +
                ", interrupted=" + interrupted +
                ", backupPropertiesId=" + backupPropertiesId +
                ", date=" + date +
                '}';
    }

    public enum RunType {
        USER,
        INTERNAL
    }

    public enum State {
        PLANNED,
        CREATING,
        RESTORING,
        DELETING,
        APPLYING_PROCESSORS,
        APPLYING_DEPROCESSORS,
        DOWNLOADING,
        UPLOADING,
        COMPLETED,
    }

    public enum Type {
        CREATE_BACKUP {
            @Override
            public String toString() {
                return "CREATE BACKUP";
            }
        },
        RESTORE_BACKUP {
            @Override
            public String toString() {
                return "RESTORE BACKUP";
            }
        },
        DELETE_BACKUP {
            @Override
            public String toString() {
                return "DELETE BACKUP";
            }
        }
    }

    public static final class Builder {
        private Type type;
        private RunType runType;
        private State state;
        private Integer backupPropertiesId;
        private LocalDateTime date;

        public Builder() {
        }

        public Builder withType(Type type) {
            this.type = type;
            return this;
        }

        public Builder withRunType(RunType runType) {
            this.runType = runType;
            return this;
        }

        public Builder withState(State state) {
            this.state = state;
            return this;
        }

        public Builder withBackupPropertiesId(Integer backupPropertiesId) {
            this.backupPropertiesId = backupPropertiesId;
            return this;
        }

        public Builder withDate(LocalDateTime date) {
            this.date = date;
            return this;
        }

        public Task build() {
            return new Task(type, runType, state, backupPropertiesId, date);
        }
    }
}
