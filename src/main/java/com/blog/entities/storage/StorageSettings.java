package com.blog.entities.storage;

import org.jetbrains.annotations.NotNull;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;

/**
 * This entity represents ыещкфпу settings.
 * <p>
 * To create a new instance of this entity use one of the static builder factory for each database type.
 * (e.g. {@link #dropboxSettings(DropboxSettings)}.
 * <p>
 * Example of creating a new instance:
 * <pre>
 * DropboxSettings dropboxSettings = new DropboxSettings();
 * dropboxSettings.setAccessToken(token);
 *
 * StorageSettings storageSettings = StorageSettings.dropboxSettings(dropboxSettings)
 *                                                  .withSettingsName(name)
 *                                                  .build();
 * </pre>
 * <p>
 * This entity is mainly used by {@link com.blog.service.storage.Storage} services to access storage.
 */
@Entity
@Table(name = "storage_settings")
public class StorageSettings {
    /**
     * Identifier of each storage settings.
     * <p>
     * This field is set by user and not generated by database. Must be unique.
     */
    @Id
    private String settingsName;

    /**
     * Storage type.
     * <p>
     * This field is set automatically by builder when using one of the static builder factory methods.
     *
     * @see StorageType
     */
    @Enumerated(EnumType.STRING)
    @Column(updatable = false)
    private StorageType type;

    /**
     * Settings creation time.
     */
    @Column(updatable = false)
    private LocalDateTime date;

    /**
     * This field contains storage specific fields depending on storage type.
     * <p>
     * Storing storage specific fields as single column allows to not overburden storage settings table and the entity as well.
     * <p>
     * This field is not exposed to entity's API and instead provided getters for each database type should be used
     * (e.g. {@link #getDropboxSettings()}.
     * <p>
     * This field is converted into JSON string and back to POJO by {@link AdditionalStorageSettingsConverter} class.
     */
    @Column(name = "additionalFields")
    @Convert(converter = AdditionalStorageSettingsConverter.class)
    private AdditionalStorageSettings additionalStorageSettings;

    StorageSettings() {
    }

    private StorageSettings(@NotNull StorageType type, @NotNull String settingsName, @NotNull LocalDateTime date,
                            @NotNull AdditionalStorageSettings additionalStorageSettings) {
        this.type = Objects.requireNonNull(type);
        this.settingsName = Objects.requireNonNull(settingsName);
        this.date = Objects.requireNonNull(date);
        this.additionalStorageSettings = Objects.requireNonNull(additionalStorageSettings);
    }

    /**
     * Static builder factory method for Local File System settings.
     *
     * @param localFileSystemSettings local file system settings
     * @return Builder with LocalFileSystemSettings and according type set.
     */
    public static Builder localFileSystemSettings(@NotNull LocalFileSystemSettings localFileSystemSettings) {
        Builder builder = new Builder();
        builder.type = StorageType.LOCAL_FILE_SYSTEM;
        builder.localFileSystemSettings = Objects.requireNonNull(localFileSystemSettings);
        return builder;
    }

    /**
     * Static builder factory method for Dropbox settings.
     *
     * @param dropboxSettings dropbox settings
     * @return Builder with DropboxSettings and according type set.
     */
    public static Builder dropboxSettings(@NotNull DropboxSettings dropboxSettings) {
        Builder builder = new Builder();
        builder.type = StorageType.DROPBOX;
        builder.dropboxSettings = Objects.requireNonNull(dropboxSettings);
        return builder;
    }

    public String getSettingsName() {
        return settingsName;
    }

    public void setSettingsName(String settingsName) {
        this.settingsName = settingsName;
    }

    void setAdditionalStorageSettings(AdditionalStorageSettings additionalStorageSettings) {
        this.additionalStorageSettings = additionalStorageSettings;
    }

    public StorageType getType() {
        return type;
    }

    public LocalDateTime getDate() {
        return date;
    }

    void setDate(LocalDateTime date) {
        this.date = date;
    }

    public Optional<DropboxSettings> getDropboxSettings() {
        return Optional.ofNullable(additionalStorageSettings.getDropboxSettings());
    }

    public Optional<LocalFileSystemSettings> getLocalFileSystemSettings() {
        return Optional.ofNullable(additionalStorageSettings.getLocalFileSystemSettings());
    }

    @Override
    public String toString() {
        return "StorageSettings{" +
                ", settingsName=" + settingsName +
                ", type=" + type +
                ", date=" + date +
                ", additionalStorageSettings=" + additionalStorageSettings +
                '}';
    }

    /**
     * Builder for this entity.
     * <p>
     * All fields are required and there are no optional fields.
     */
    public static final class Builder {
        private StorageType type;

        private String settingsName;

        private LocalDateTime date;

        private LocalFileSystemSettings localFileSystemSettings;

        private DropboxSettings dropboxSettings;

        private Builder() {
        }

        public StorageSettings build() {
            AdditionalStorageSettings additionalStorageSettings = new AdditionalStorageSettings(
                    type, localFileSystemSettings, dropboxSettings);
            return new StorageSettings(type, settingsName, date, additionalStorageSettings);
        }

        public Builder withSettingsName(@NotNull String settingsName) {
            this.settingsName = settingsName;
            return this;
        }

        public Builder withDate(@NotNull LocalDateTime date) {
            this.date = date;
            return this;
        }
    }
}
