package com.blog.entities.backup;

import javax.persistence.*;
import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.Optional;

/**
 * This entity represents planned backup task.
 */
@Entity
@Table(name = "planned_backup_tasks")
public class PlannedBackupTask {
    /**
     * Identifier of each planned backup task. Identifier is generated by PostgreSQL database after saving of entity.
     */
    @Id
    @Column(insertable = false, updatable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * Planned backup task type.
     *
     * @see PlannedBackupTask.Type
     */
    @Enumerated(EnumType.STRING)
    private Type type;

    /**
     * List of storage settings identifier.
     * <p>
     * We need to know storage settings ID to be able to start a new task when the timer fired.
     */
    @Convert(converter = ListFieldConverter.class)
    private List<String> storageSettingsNameList;

    /**
     * Identifier of database settings.
     * <p>
     * We need to know database settings ID to be able to start a new task when the timer fired.
     */
    private String databaseSettingsName;

    /**
     * What processors to apply on backup.
     * <p>
     * This field automatically converted into single string and back to List by {@link ListFieldConverter} class.
     */
    @Column(updatable = false)
    @Convert(converter = ListFieldConverter.class)
    private List<String> processors;

    /**
     * Timestamp of moment when task was started last time.
     * <p>
     * No tz offset set. Time stored in database in UTC and showed on front with offset of JVM machine timezone.
     */
    private Instant lastStartedTime;

    /**
     * Period before starting task next time.
     */
    private Duration interval;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Type getType() {
        return type;
    }

    public void setType(Type type) {
        this.type = type;
    }

    public List<String> getStorageSettingsNameList() {
        return storageSettingsNameList;
    }

    public void setStorageSettingsNameList(List<String> storageSettingsNameList) {
        this.storageSettingsNameList = storageSettingsNameList;
    }

    public String getDatabaseSettingsName() {
        return databaseSettingsName;
    }

    public void setDatabaseSettingsName(String databaseSettingsName) {
        this.databaseSettingsName = databaseSettingsName;
    }

    public List<String> getProcessors() {
        return processors;
    }

    public void setProcessors(List<String> processors) {
        this.processors = processors;
    }

    public Instant getLastStartedTime() {
        return lastStartedTime;
    }

    public void setLastStartedTime(Instant lastStartedTime) {
        this.lastStartedTime = lastStartedTime;
    }

    public Duration getInterval() {
        return interval;
    }

    public void setInterval(Duration interval) {
        this.interval = interval;
    }

    @Override
    public String toString() {
        return "PlannedBackupTask{" +
                "id=" + id +
                ", type=" + type +
                ", storageSettingsNameList=" + storageSettingsNameList +
                ", databaseSettingsName='" + databaseSettingsName + '\'' +
                ", processors=" + processors +
                ", lastStartedTime=" + lastStartedTime +
                ", interval=" + interval.toString() +
                '}';
    }

    public enum Type {
        ONCE("once"),
        PERIODIC("periodic");

        private final String typeAsString;

        Type(String typeAsString) {
            this.typeAsString = typeAsString;
        }

        public static Optional<Type> of(String type) {
            for (Type currentType : values()) {
                if (type.equals(currentType.typeAsString)) {
                    return Optional.of(currentType);
                }
            }
            return Optional.empty();
        }
    }
}
